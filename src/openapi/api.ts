/* tslint:disable */
/* eslint-disable */
/**
 * Recipe Book
 * backend for recipe book
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface RecipeDto
 */
export interface RecipeDto {
    /**
     * The id of the recipe
     * @type {string}
     * @memberof RecipeDto
     */
    'recipeId'?: string;
    /**
     * The id of the user associated with the recipe
     * @type {string}
     * @memberof RecipeDto
     */
    'userId'?: string;
    /**
     * The name of the recipe
     * @type {string}
     * @memberof RecipeDto
     */
    'name'?: string;
    /**
     * The notes for the recipe
     * @type {string}
     * @memberof RecipeDto
     */
    'notes'?: string;
    /**
     * The prep time hours for the recipe
     * @type {number}
     * @memberof RecipeDto
     */
    'prepTimeHours'?: number;
    /**
     * The prep time minutes for the recipe
     * @type {number}
     * @memberof RecipeDto
     */
    'prepTimeMinutes'?: number;
    /**
     * The cook time hours for the recipe
     * @type {number}
     * @memberof RecipeDto
     */
    'cookTimeHours'?: number;
    /**
     * The cook time minutes for the recipe
     * @type {number}
     * @memberof RecipeDto
     */
    'cookTimeMinutes'?: number;
    /**
     * The ingredients for the recipe
     * @type {string}
     * @memberof RecipeDto
     */
    'ingredients'?: string;
    /**
     * The instructions for the recipe
     * @type {string}
     * @memberof RecipeDto
     */
    'instructions'?: string;
}
/**
 * 
 * @export
 * @interface RecipeListingDto
 */
export interface RecipeListingDto {
    /**
     * The id of the recipe
     * @type {string}
     * @memberof RecipeListingDto
     */
    'recipeId'?: string;
    /**
     * The name of the recipe
     * @type {string}
     * @memberof RecipeListingDto
     */
    'name'?: string;
    /**
     * The total time for the recipe
     * @type {string}
     * @memberof RecipeListingDto
     */
    'totalTime'?: string;
    /**
     * The timestamp of when the recipe was created
     * @type {string}
     * @memberof RecipeListingDto
     */
    'createdTs'?: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * The id of the user
     * @type {string}
     * @memberof UserDto
     */
    'id'?: string;
    /**
     * The first name of the user
     * @type {string}
     * @memberof UserDto
     */
    'firstName'?: string;
    /**
     * The last name of the user
     * @type {string}
     * @memberof UserDto
     */
    'lastName'?: string;
    /**
     * The email of the user
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlankRecipie: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes/blank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipe: async (recipeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('deleteRecipe', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipe: async (recipeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('getRecipe', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {RecipeDto} recipeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipe: async (recipeId: string, recipeDto: RecipeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('updateRecipe', 'recipeId', recipeId)
            // verify required parameter 'recipeDto' is not null or undefined
            assertParamExists('updateRecipe', 'recipeDto', recipeDto)
            const localVarPath = `/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBlankRecipie(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBlankRecipie(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipe(recipeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipe(recipeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipe(recipeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipe(recipeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipeListingDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {RecipeDto} recipeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecipe(recipeId: string, recipeDto: RecipeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecipe(recipeId, recipeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlankRecipie(options?: any): AxiosPromise<RecipeDto> {
            return localVarFp.createBlankRecipie(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipe(recipeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRecipe(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipe(recipeId: string, options?: any): AxiosPromise<RecipeDto> {
            return localVarFp.getRecipe(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipes(options?: any): AxiosPromise<Array<RecipeListingDto>> {
            return localVarFp.getRecipes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(options?: any): AxiosPromise<UserDto> {
            return localVarFp.login(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} recipeId 
         * @param {RecipeDto} recipeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipe(recipeId: string, recipeDto: RecipeDto, options?: any): AxiosPromise<RecipeDto> {
            return localVarFp.updateRecipe(recipeId, recipeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBlankRecipie(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBlankRecipie(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRecipe(recipeId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRecipe(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipe(recipeId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecipe(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipes(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecipes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} recipeId 
     * @param {RecipeDto} recipeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRecipe(recipeId: string, recipeDto: RecipeDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRecipe(recipeId, recipeDto, options).then((request) => request(this.axios, this.basePath));
    }
}


